// Code generated by go-bindata.
// sources:
// data/github_auth.tmpl
// data/google_auth.tmpl
// DO NOT EDIT!

package authn

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGithub_authTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\xb1\x6e\xf4\x20\x10\x84\x7b\x3f\x05\xa2\xf8\xaf\x33\xfd\x09\xfc\x2b\x4a\x91\x44\x4a\x95\x17\x88\x30\xde\x98\xd5\x61\x16\xc1\x92\xe8\x72\xba\x77\x0f\xc6\x45\x5e\x20\x0d\xda\x91\x98\x6f\x46\xa3\x3d\x6f\x41\x20\xc3\x56\x1c\x25\xe8\x17\x5f\x13\x18\xe9\x99\xd3\x59\xa9\xe2\x3c\x6c\x76\xa4\xbc\xaa\x87\xcc\xe8\x02\xc8\x69\xd0\x33\x2d\xd7\x69\x10\x42\xcf\x95\x99\xa2\x38\x2c\x87\x90\x82\xa2\x0b\xe8\x2e\x46\x06\x72\x96\x91\xe2\xe8\x33\x7c\x98\xd3\x8e\x2c\x8d\xb9\x22\xfb\x3a\x8f\x8e\x36\x15\x68\xc5\xa8\xc8\x56\xf6\x6a\x7f\x28\xe3\x37\xfc\xef\x5d\x4c\x2d\x90\xcf\x2d\x1c\xc3\xbf\xc6\x83\xc8\xef\xb8\x98\xdb\x6d\x7c\xec\xe2\x65\xb9\xdf\x4f\x72\x7a\xdd\x01\xe2\xab\x11\xc5\x13\xf2\x73\x9d\xb5\x3a\x6a\xfc\x49\xbd\x02\xcc\x18\xd7\xa2\x6c\x4a\xcd\xd3\x7f\x97\x96\xfa\x06\x9f\x74\x01\x61\x9d\x83\x52\x7e\x13\xdb\xd5\x87\xd1\x6a\x9f\x75\x1a\x7e\x02\x00\x00\xff\xff\x70\x1a\x30\x49\x5e\x01\x00\x00")

func dataGithub_authTmplBytes() ([]byte, error) {
	return bindataRead(
		_dataGithub_authTmpl,
		"data/github_auth.tmpl",
	)
}

func dataGithub_authTmpl() (*asset, error) {
	bytes, err := dataGithub_authTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/github_auth.tmpl", size: 350, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGoogle_authTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x6d\x6b\xeb\x36\x14\xfe\x9c\xfc\x0a\xe1\x5d\xb0\xc3\x7a\x65\x76\x3f\x8c\x4b\x6e\x92\xd1\xdd\xc1\xe8\x18\x6b\x59\xbb\x4f\x63\x04\x55\x3e\x76\xd4\x2a\x92\x27\x1d\x77\x0d\x21\xff\x7d\x47\x92\xf3\xd2\x97\x84\x0e\xc6\xc6\x16\x68\x6d\x9f\xa3\xf3\x9c\x17\x3d\x8f\xe5\xc9\x02\x97\x9a\x29\x84\xa5\x97\xb6\x85\x78\x87\xab\x16\xa6\xd9\x02\xb1\x1d\x97\xa5\x97\x0b\x58\x0a\x6e\x5d\x53\x9e\x3b\x54\x52\x43\x36\x1b\x4e\x16\x20\xaa\xd9\x90\xb1\x89\x97\x4e\xb5\xc8\xbc\x93\xd3\xac\x2c\xc5\x9d\x78\xe4\x8d\xb5\x8d\x06\xd1\x2a\xcf\xa5\x5d\x46\x5b\xa9\xd5\xad\x2f\xef\x7e\xef\xc0\xad\xca\xaf\xf8\x47\xfe\xa1\x7f\xe0\x4b\x65\xf8\x9d\xcf\x66\x93\x32\x21\xbd\x00\x0d\x65\x78\xaa\x23\xe2\x25\xe8\x08\x7b\xe7\x4b\xa9\x15\x18\x1c\xb7\x5a\x60\x6d\xdd\x92\x70\xbe\xb1\x46\x5b\x51\x4d\x3d\x0a\x87\x19\x13\x7e\x65\x24\xab\xa0\x06\xf7\x5a\x82\xd9\x70\x30\xa8\x3b\x23\x51\x59\xc3\xa8\x4d\x79\xff\xa3\x6d\x94\x29\x46\x6c\x4d\x9e\xc1\x83\x70\x4c\x74\xb8\xf8\xc0\xa6\xac\xa1\xf4\x3c\x3e\xf0\x06\xf0\x9c\x6e\x2e\x0c\x25\x31\x12\x8a\xd1\xa7\xb0\x58\xd5\xac\x48\x7e\xe5\xaf\x55\x63\xa0\xba\x30\x61\x69\x31\xea\xd1\x06\xef\x8a\xfc\x0b\x07\xbe\xd3\x98\x8f\x38\xc2\x23\x16\xf9\x83\xd0\xaa\x12\xa8\x4c\xc3\xe0\x51\xf9\x78\x83\xf6\x1e\x0c\xe7\x3c\x4f\xb8\xb1\x0a\x55\xcd\xa3\x99\x0a\x49\x39\x64\xe7\x1c\xb5\xfe\x8b\x07\x97\x92\x6c\xab\xfa\x19\x7c\x6b\x8d\xa7\xaa\xf8\x36\x28\xc1\xbc\xe3\x61\x1f\x8a\x54\xca\x20\xec\xf0\x98\xe5\x57\x97\xd7\x37\xf9\x59\x32\x75\x4e\x93\xa5\x4c\x13\x9e\x87\x34\x5b\x8f\xb4\x06\x29\xd9\x4d\x8a\x11\x6d\xab\x95\x14\x61\x66\xb4\x07\xd6\x7c\xa2\xc9\x09\xe7\x01\xa7\x1d\xd6\xef\x3f\x6e\x83\x5a\x67\x25\x78\xff\x9d\x40\x31\x66\xb5\xd0\x1e\x7a\x47\x15\x2d\x3f\x5c\x5f\xfe\xc4\x3d\x3a\xea\x58\xd5\xab\x62\x9d\x8b\xb8\x0b\x39\x25\x88\x1b\x91\x9f\xb1\x3c\x56\x4f\x96\x6d\x23\x9b\x51\x0f\xe1\x3b\x19\xb0\x09\xb7\xdf\xbc\x22\xcd\x75\x3b\xe9\xd7\x66\xdd\xaf\x48\xc3\x18\x6c\x7a\x24\x70\xce\xba\x03\x9c\xc7\x85\x3b\x05\x92\xf7\xeb\x73\xf6\x25\xa3\xa5\xdc\xf5\xd3\xbe\x21\xe7\x33\xe8\x4d\x7a\xde\x30\xa0\xd6\x7b\x48\x1a\xa4\xb7\x44\x5f\x6d\x9b\x22\x37\x16\x19\xdd\x34\x50\x31\x65\xfa\xcd\xde\x0c\xc3\x1f\xa3\xdf\x8e\x96\x91\xc9\x91\x91\x2c\xfe\x22\x11\x03\xc7\x8b\x3c\x52\x81\x06\xb5\xab\x7e\x5b\xfa\x01\x59\x95\x51\x58\xac\x93\x50\xe6\xaa\xa2\xd2\xd7\x6b\xfe\x39\x3e\x5e\x54\x9b\x4d\xbe\xa1\xce\x16\x60\x8a\x3d\xfb\xfb\x4a\xe8\x12\xd2\x85\x6a\xf6\xca\x99\x94\x49\xf7\x93\x5b\x5b\xad\x48\x3d\x93\xdb\x0e\x91\x8a\x54\xd5\x34\xf3\x44\x7a\x65\xbe\x8d\x86\x6c\x16\x24\x40\x7d\xb1\x3f\x14\x2e\xd8\xf7\x91\x53\x93\x32\xad\x0e\x71\x7b\xfd\x85\x21\x1f\x86\xd2\xa8\xa9\x5a\x79\x5f\x3c\xef\xaa\x2c\x59\x58\x77\x61\x3e\x0b\xad\x6f\x85\xbc\x0f\xba\x56\x26\x8e\x8f\xa6\x04\x2d\xfb\x9a\xff\x65\xd5\xf6\x3e\x27\x0c\x5e\xd6\xb5\x26\xb8\xf3\x48\x2d\x22\xa4\x83\x4a\x39\x90\x38\xef\x9c\x0a\xb4\x6c\xad\xc7\x25\xb9\x44\x03\x81\x9c\xc4\xef\x65\x8b\x91\xaf\x81\x01\x06\x77\xa3\xdc\x15\x2e\x92\x1e\x0f\x88\x79\x48\x80\x03\xef\x7f\x4d\xa1\x61\x1f\xe6\x44\xda\xb3\xd0\x7c\x05\x64\xda\x37\xf3\x6b\x32\xfd\xf6\x37\x8a\xf5\xc9\xd8\xb2\xe4\x1b\x67\x67\xec\x1f\x93\xf4\x53\xe1\xa6\x00\x6a\xfe\x8d\x6f\x80\x78\x89\xff\xf7\x42\x7a\xa1\x9c\xcb\x0e\x9f\x48\xc7\x76\x78\x5a\x2f\xbb\x80\xa3\x82\xf9\x5f\x1d\x5f\xa4\xfe\x2b\x70\xe1\x94\x67\x14\xf4\x00\xee\xbd\x57\x15\xc4\x37\x42\x98\x15\xff\x57\x14\xf4\x36\xa1\x50\x79\x27\x4f\xb3\xa3\x3a\x7c\xa9\x1c\xda\x8b\x63\x34\x3f\x70\xd1\xd7\x51\xab\x01\xe1\x98\x08\x9e\xb0\x79\x3b\xc1\x5e\x4d\xa7\x78\x3d\x38\xc5\x22\x5e\x29\xfa\x80\x34\x86\xde\x98\xc5\x2e\xe0\x15\xce\xf8\x48\xae\x90\x31\x7f\xc3\x89\xf9\x0a\xc0\xd1\x73\xf3\xb9\xc2\x2a\xf5\x10\xe5\x95\xe2\xc3\x17\x26\x59\xc2\x19\x96\x0e\x2f\x3a\xcb\xe8\xcb\x77\x36\xfc\x33\x00\x00\xff\xff\x8d\x6b\x3d\x03\x01\x0b\x00\x00")

func dataGoogle_authTmplBytes() ([]byte, error) {
	return bindataRead(
		_dataGoogle_authTmpl,
		"data/google_auth.tmpl",
	)
}

func dataGoogle_authTmpl() (*asset, error) {
	bytes, err := dataGoogle_authTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/google_auth.tmpl", size: 2817, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/github_auth.tmpl": dataGithub_authTmpl,
	"data/google_auth.tmpl": dataGoogle_authTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"github_auth.tmpl": &bintree{dataGithub_authTmpl, map[string]*bintree{}},
		"google_auth.tmpl": &bintree{dataGoogle_authTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

