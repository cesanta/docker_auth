// Code generated by go-bindata.
// sources:
// data/google_auth.tmpl
// DO NOT EDIT!

package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGoogle_authTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x6d\x6b\xeb\x36\x14\xfe\x9c\xfc\x0a\xe1\x5d\xb0\xc3\x7a\x65\x76\x3f\x8c\x4b\x6e\x92\xd1\xdd\xc1\xe8\x18\x6b\x59\xbb\x4f\x63\x04\x55\x3e\x76\xd4\x2a\x92\x27\x1d\x77\x0d\x21\xff\x7d\x47\x92\xf3\xd2\x97\x84\x0e\xc6\xc6\x16\x68\x63\x9f\xa3\xf3\xf6\xe8\x79\x22\x4d\x16\xb8\xd4\x4c\x21\x2c\xbd\xb4\x2d\xc4\x27\x5c\xb5\x30\xcd\x16\x88\xed\xb8\x2c\xbd\x5c\xc0\x52\x70\xeb\x9a\xf2\xdc\xa1\x92\x1a\xb2\xd9\x70\xb2\x00\x51\xcd\x86\x8c\x4d\xbc\x74\xaa\x45\xe6\x9d\x9c\x66\x65\x29\xee\xc4\x23\x6f\xac\x6d\x34\x88\x56\x79\x2e\xed\x32\xda\x4a\xad\x6e\x7d\x79\xf7\x7b\x07\x6e\x55\x7e\xc5\x3f\xf2\x0f\xfd\x0b\x5f\x2a\xc3\xef\x7c\x36\x9b\x94\x29\xd3\x8b\xa4\xa1\x0d\x4f\x7d\xc4\x7c\x29\x75\x4c\x7b\xe7\x4b\xa9\x15\x18\x1c\xb7\x5a\x60\x6d\xdd\x92\xf2\x7c\x63\x8d\xb6\xa2\x9a\x7a\x14\x0e\x33\x26\xfc\xca\x48\x56\x41\x0d\xee\xb5\x02\xb3\xe1\x60\x50\x77\x46\xa2\xb2\x86\xd1\x98\xf2\xfe\x47\xdb\x28\x53\x8c\xd8\x9a\x3c\x83\x07\xe1\x98\xe8\x70\xf1\x81\x4d\x59\x43\xe5\x79\x7c\xe1\x0d\xe0\x39\x3d\x5c\x18\x2a\x62\x24\x14\xa3\x4f\x61\xb1\xaa\x59\x91\xfc\xca\x5f\xab\xc6\x40\x75\x61\xc2\xd2\x62\xd4\x67\x1b\xbc\x2b\xf2\x2f\x1c\xf8\x4e\x63\x3e\xe2\x08\x8f\x58\xe4\x0f\x42\xab\x4a\xa0\x32\x0d\x83\x47\xe5\xe3\x03\xda\x7b\x30\x9c\xf3\x3c\xe5\x8d\x5d\xa8\x6a\x1e\xcd\xd4\x48\xaa\x21\x3b\xe7\x68\xf4\x5f\x3c\xb8\x54\x64\xdb\xd5\xcf\xe0\x5b\x6b\x3c\x75\xc5\xb7\x41\x29\xcd\x3b\x1e\xf6\xa1\x48\xad\x0c\xc2\x0e\x8f\x59\x7e\x75\x79\x7d\x93\x9f\x25\x53\xe7\x34\x59\xca\x84\xf0\x3c\x94\xd9\x7a\xa4\x35\x48\xc5\x6e\x52\x8c\x68\x5b\xad\xa4\x08\x98\xd1\x1e\x58\xf3\x89\x90\x13\xce\x03\x4e\x3b\xac\xdf\x7f\xdc\x06\xb5\xce\x4a\xf0\xfe\x3b\x81\x62\xcc\x6a\xa1\x3d\xf4\x8e\x2a\x5a\x7e\xb8\xbe\xfc\x89\x7b\x74\x34\xb1\xaa\x57\xc5\x3a\x17\x71\x17\x72\x2a\x10\x37\x22\x3f\x63\x79\xec\x9e\x2c\xdb\x41\x36\xa3\x3e\x85\xef\x64\xc8\x4d\x79\xfb\xcd\x2b\x12\xae\x5b\xa4\x5f\xc3\xba\x5f\x91\xc0\x18\x6c\xfa\x4c\xe0\x9c\x75\x07\x79\x1e\x17\xee\x54\x92\xbc\x5f\x9f\xb3\x2f\x19\x2d\xe5\xae\x47\xfb\x86\x9c\xcf\x52\x6f\xd2\xfb\x86\x01\x8d\xde\xa7\x24\x20\xbd\x25\xfa\x6a\xdb\x14\xb9\xb1\xc8\xe8\xa1\x81\x8a\x29\xd3\x6f\xf6\x66\x18\xfe\x18\x7d\x76\xb4\x8c\x4c\x8e\x8c\x64\xf1\x13\x89\x18\x38\x5e\xe4\x91\x0a\x04\xd4\xae\xfb\x6d\xeb\x07\x64\x55\x46\x61\xb1\x4e\x42\x99\xab\x8a\x5a\x5f\xaf\xf9\xe7\xf8\x7a\x51\x6d\x36\xf9\x86\x26\x5b\x80\x29\xf6\xec\xef\x3b\xa1\xaf\x50\x2e\x74\xb3\x57\xce\xa4\x4c\xba\x9f\xdc\xda\x6a\x45\xea\x99\xdc\x76\x88\xd4\xa4\xaa\xa6\x99\x27\xd2\x2b\xf3\x6d\x34\x64\xb3\x20\x01\x9a\x8b\xfd\xa1\x70\xc1\xbe\x8f\x9c\x9a\x94\x69\x75\x88\xdb\xeb\x2f\x80\x7c\x18\x4a\x50\x53\xb7\xf2\xbe\x78\x3e\x55\x59\xb2\xb0\xee\xc2\x7c\x16\x5a\xdf\x0a\x79\x1f\x74\xad\x4c\x84\x8f\x50\x82\x96\x7d\xcd\xff\xb2\x6a\x7b\x9f\x13\x06\x2f\xeb\x5a\x53\xba\xf3\x48\x2d\x22\xa4\x83\x4a\x39\x90\x38\xef\x9c\x0a\xb4\x6c\xad\xc7\x25\xb9\x44\x03\x3b\xd4\x76\x3d\x8a\x24\xbd\x03\x0e\x1e\xee\xf5\x81\xf7\xbf\x26\xc6\x00\xf9\x9c\xf8\x49\x72\x94\xb6\x02\x32\xed\x87\xf9\x35\x99\x7e\xfb\x1b\x75\xf9\x04\xb6\x2c\xf9\xc6\xd9\x19\xfb\xc7\xd4\xfb\x54\xa3\x29\x80\x86\x7f\xa3\xd8\xe3\x57\xfc\xbf\xd7\xcc\x0b\x91\x5c\x76\xf8\x44\x25\xb6\xc3\xd3\xd2\xd8\x05\x1c\xd5\xc6\xff\xea\xa4\x22\xa1\x5f\x81\x0b\x07\x3a\xa3\xa0\x07\x70\xef\xbd\xaa\x20\x8a\x3f\x60\xc5\xff\x15\x05\xbd\x4d\x28\xd4\xde\xc9\x83\xeb\xa8\x0e\x5f\x2a\x87\xf6\xe2\x18\xcd\x0f\x5c\x74\x11\x6a\x35\x20\x1c\x13\xc1\x13\x36\x6f\x11\xec\xd5\x74\x8a\xd7\x83\x53\x2c\xe2\x95\xa2\xbb\xa2\x31\xf4\xe3\x58\xec\x02\x5e\xe1\x8c\x8f\xe4\x0a\x15\xf3\x37\x1c\x8e\xaf\x24\x38\x7a\x44\x3e\x57\x58\xa5\x1e\xa2\xbc\x52\x7c\xb8\x4c\x92\x25\x1c\x57\xe9\x9c\xa2\x63\x8b\x2e\xb9\xb3\xe1\x9f\x01\x00\x00\xff\xff\xf6\x19\xb6\xcf\xec\x0a\x00\x00")

func dataGoogle_authTmplBytes() ([]byte, error) {
	return bindataRead(
		_dataGoogle_authTmpl,
		"data/google_auth.tmpl",
	)
}

func dataGoogle_authTmpl() (*asset, error) {
	bytes, err := dataGoogle_authTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/google_auth.tmpl", size: 2796, mode: os.FileMode(436), modTime: time.Unix(1433497505, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/google_auth.tmpl": dataGoogle_authTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"google_auth.tmpl": &bintree{dataGoogle_authTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

