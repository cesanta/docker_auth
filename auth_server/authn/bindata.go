// Code generated by go-bindata.
// sources:
// data/github_auth.tmpl
// data/google_auth.tmpl
// DO NOT EDIT!

package authn

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGithub_authTmpl = []byte(`<html itemscope itemtype="http://schema.org/Article">
<body>
  <button type="button" onclick="location.href='https://github.com/login/oauth/authorize?scope=user:email&client_id={{.ClientId}}'">Login with GitHub</button>
  <button type="button" onclick="location.href='https://github.com/settings/applications'">Revoke access</button>
</body>
</html>
`)

func dataGithub_authTmplBytes() ([]byte, error) {
	return _dataGithub_authTmpl, nil
}

func dataGithub_authTmpl() (*asset, error) {
	bytes, err := dataGithub_authTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/github_auth.tmpl", size: 350, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataGoogle_authTmpl = []byte(`<html itemscope itemtype="http://schema.org/Article">
<head>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
  <script src="https://apis.google.com/js/client:platform.js?onload=start" async defer></script>
  <script>
		function checkLogin() {
			var auth2 = gapi.auth2.getAuthInstance();
			if (auth2.isSignedIn.get()) {
				$('#result').text('validating existing token...');
				var id_token = auth2.currentUser.get().getAuthResponse().id_token;
				$.ajax({
					type: 'POST',
					url: '/google_auth',
					contentType: 'application/json; charset=utf-8',
					processData: false,
					data: JSON.stringify({'action': 'check', 'token': id_token}),
					success: function(result) {
						$('#result').text(result);
					},
					error: function(xhr) {
						$('#result').text('error: ' + xhr.responseText);
					},
				});
			} else {
				console.log('not logged in');
			}
		}
    function start() {
      gapi.load('auth2', function() {
				gapi.auth2.init({client_id: '{{.ClientId}}'}).then(checkLogin);
			});
    }
  </script>
</head>
<body>
	<button id="signinButton">Sign in with Google</button>
	<script>
		$('#signinButton').click(function() {
			// signInCallback defined in step 6.
			var auth2 = gapi.auth2.getAuthInstance();
			auth2.grantOfflineAccess({'redirect_uri': 'postmessage', 'prompt': 'consent'}).then(function(authResult) {
				console.log(authResult);
				$.ajax({
					type: 'POST',
					url: '/google_auth',
					contentType: 'application/json; charset=utf-8',
					processData: false,
					data: JSON.stringify({'action': 'sign_in', 'code': authResult['code']}),
					success: function(result) {
						$('#result').text(result);
						console.log("result:", result);
					},
					error: function(xhr) {
						$('#result').text('error: ' + xhr.responseText);
						console.log('error:', xhr.responseText);
					},
				});
			});
		});
	</script>
	<button id="signOutButton">Sign out</button>
	<script>
		$('#signOutButton').click(function() {
			var auth2 = gapi.auth2.getAuthInstance();
			if (auth2.isSignedIn.get()) {
				$('#result').text('validating existing token...');
				var id_token = auth2.currentUser.get().getAuthResponse().id_token;
				// Perform server-side sign out.
				$.ajax({
					type: 'POST',
					url: '/google_auth',
					contentType: 'application/json; charset=utf-8',
					data: JSON.stringify({'action': 'sign_out', 'token': id_token}),
					processData: false,
					success: function() {},
					error: function() {},
					complete: function(xhr) {
						console.log('sign out result:', xhr.responseText);
						gapi.auth2.getAuthInstance().disconnect();
						$('#result').text('signed out');
					},
				});
			} else {
				$('#result').text('not logged in');
			}
		});
	</script>
	<div id="result"></div>
</body>
</html>
`)

func dataGoogle_authTmplBytes() ([]byte, error) {
	return _dataGoogle_authTmpl, nil
}

func dataGoogle_authTmpl() (*asset, error) {
	bytes, err := dataGoogle_authTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/google_auth.tmpl", size: 2817, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/github_auth.tmpl": dataGithub_authTmpl,
	"data/google_auth.tmpl": dataGoogle_authTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"github_auth.tmpl": &bintree{dataGithub_authTmpl, map[string]*bintree{}},
		"google_auth.tmpl": &bintree{dataGoogle_authTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

